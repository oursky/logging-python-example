# For the schema of this file, see
# https://docs.python.org/3/library/logging.config.html#logging-config-api
#
# The name of this file is unimportant, as long as you know where to load it.
version: 1
# This line is very important.
# Without this line, loggers that exist before this configuration applies
# will be disabled. (i.e. they DO NOT log anything.)
disable_existing_loggers: false
formatters:
  default:
    class: app.logging.SlogFormatter
    format: "%(asctime)s %(levelname)s %(name)s: %(message)s"
handlers:
  stderr:
    class: logging.StreamHandler
    formatter: default
    # This handler basically logs any records that get to it.
    # We rely on the level of the root logger to do the actual filtering.
    level: DEBUG
    stream: ext://sys.stderr
  sentry_event:
    class: sentry_sdk.integrations.logging.EventHandler
    level: DEBUG
  sentry_breadcumb:
    class: sentry_sdk.integrations.logging.BreadcrumbHandler
    level: INFO
  otp_slack:
    class: app.logging.SlackHandler
    level: INFO
    url: "to be set programmatically"
loggers:
  # Gunicorn has default logging config and it MERGES the user-provided config
  # with its own one.
  # Since we have defined our own formatters and handlers,
  # we must also re-defined the gunicorn loggers so that they DO NOT reference
  # formatters and handlers in the default logging config.
  gunicorn.access:
    # Turn off the access log.
    propagate: false
    handlers: []
  gunicorn.error:
    # To stderr only.
    level: INFO
    propagate: false
    handlers: [stderr]
  app.payment:
    # But we want to log INFO or above from app.payment.
    level: INFO
  testing.otp:
    # In testing enviroment, we also send the OTP code to some other channel to make testing easier.
    level: INFO
    propagate: false
    handlers: [stderr, otp_slack]
root:
  # By default, log only ERROR or above.
  level: ERROR
  handlers:
  - stderr
  - sentry_event
  - sentry_breadcumb
